openapi: 3.0.3
info:
  title: Chat Application API
  version: 0.1.0
  description: REST API for multi-interface chat application
  
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
    
security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '400':
          description: Invalid request format

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: Invalid refresh token

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      responses:
        '200':
          description: Logged out successfully

  # User endpoints  
  /users:
    get:
      tags: [Users]
      summary: List all users (admin only)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Admin access required
          
    post:
      tags: [Users]
      summary: Create new user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                password:
                  type: string
                  minLength: 8
                display_name:
                  type: string
                  maxLength: 30
                email:
                  type: string
                  format: email
                role_id:
                  type: string
                  format: uuid
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
        '409':
          description: Username already exists

  /users/{user_id}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          
    put:
      tags: [Users]
      summary: Update user (admin or self)
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                display_name:
                  type: string
                  maxLength: 30
                email:
                  type: string
                  format: email
                is_active:
                  type: boolean
                role_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Insufficient permissions
        '404':
          description: User not found

  # Channel endpoints
  /channels:
    get:
      tags: [Channels]
      summary: List accessible channels
      responses:
        '200':
          description: Channels list
          content:
            application/json:
              schema:
                type: object
                properties:
                  channels:
                    type: array
                    items:
                      $ref: '#/components/schemas/Channel'
                      
    post:
      tags: [Channels]
      summary: Create new channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-z0-9-]+$'
                display_name:
                  type: string
                  maxLength: 50
                description:
                  type: string
                  maxLength: 500
                is_private:
                  type: boolean
                  default: false
                max_members:
                  type: integer
                  minimum: 2
                  maximum: 200
                  default: 50
      responses:
        '201':
          description: Channel created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          description: Invalid channel data
        '409':
          description: Channel name already exists

  /channels/{channel_id}:
    get:
      tags: [Channels]
      summary: Get channel details
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Channel details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '404':
          description: Channel not found
        '403':
          description: Not a channel member
          
    put:
      tags: [Channels]
      summary: Update channel (admin/moderator only)
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                display_name:
                  type: string
                  maxLength: 50
                description:
                  type: string
                  maxLength: 500
                max_members:
                  type: integer
                  minimum: 2
                  maximum: 200
                is_archived:
                  type: boolean
      responses:
        '200':
          description: Channel updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '403':
          description: Insufficient permissions
        '404':
          description: Channel not found

  /channels/{channel_id}/messages:
    get:
      tags: [Messages]
      summary: Get channel message history
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: before
          in: query
          description: Get messages before this timestamp
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        '200':
          description: Message history
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  has_more:
                    type: boolean
        '403':
          description: Not a channel member
        '404':
          description: Channel not found
          
    post:
      tags: [Messages]
      summary: Send message to channel
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 5000
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: Not a channel member or muted
        '404':
          description: Channel not found

  # Direct message endpoints
  /conversations:
    get:
      tags: [Direct Messages]
      summary: List user's direct conversations
      responses:
        '200':
          description: Conversations list
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/DirectConversation'

  /conversations/{user_id}:
    get:
      tags: [Direct Messages]
      summary: Get direct conversation with user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectConversation'
        '404':
          description: User not found

  /conversations/{user_id}/messages:
    get:
      tags: [Direct Messages] 
      summary: Get direct message history
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: before
          in: query
          description: Get messages before this timestamp
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        '200':
          description: Message history
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  has_more:
                    type: boolean
        '404':
          description: User not found
          
    post:
      tags: [Direct Messages]
      summary: Send direct message to user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 5000
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: User not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        email:
          type: string
          format: email
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_seen:
          type: string
          format: date-time
        role:
          $ref: '#/components/schemas/Role'

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        permissions:
          type: object

    Channel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
        is_private:
          type: boolean
        is_archived:
          type: boolean
        max_members:
          type: integer
        member_count:
          type: integer
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: '#/components/schemas/User'

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        edited_at:
          type: string
          format: date-time
        message_type:
          type: string
          enum: [text, system, join, leave]

    DirectConversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        other_user:
          $ref: '#/components/schemas/User'
        last_message:
          $ref: '#/components/schemas/Message'
        last_message_at:
          type: string
          format: date-time
        unread_count:
          type: integer

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        has_next:
          type: boolean
        has_prev:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object